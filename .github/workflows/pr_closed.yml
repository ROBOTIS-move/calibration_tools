name: PR Closed
on:
  pull_request:
    types:
      - closed
concurrency: 
  group: pr_auto
  cancel-in-progress: false
jobs:
  apply_pr:
    runs-on: ubuntu-latest
    container:
      image: hpaper/github-action
    if: github.event.pull_request.merged == true
    steps:
    - name: Set git user
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Checkout head branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Fix directory ownership and permissions
      run: |
        chown -R $(whoami) /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
        chmod -R u+rwX /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

    - name: Update version info in package.xml and CHANGLOG.rst and create release tag and PR
      run: |
        PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q '.body')
        PR_URL=${{ github.event.pull_request.html_url }}
        AUTHOR=${{ github.event.pull_request.user.login }}
    
        echo "Update version info in package.xml and CHANGLOG.rst"
    
        if [[ "${{ github.head_ref }}" == hotfix-* ]]; then
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "Hotfix to main"
          
            # Main branch에서 CHANGELOG.rst의 마지막 버전을 가지고와 hotfix 버전을 계산합니다.
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            BASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG.rst")
            MAIN_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$BASE_VERSION" "patch")

            # Hotfix Branch의 버전을 새로운 버전으로 변경합니다.
            git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
            git checkout ${{ github.head_ref }}

            python3 ./.github/changelogs/insert_changelog.py "$MAIN_VERSION" "CHANGELOG.rst" "$PR_BODY" "$AUTHOR" "$PR_URL"
            git add .
            git commit -m "[AUTO] Hotfix $MAIN_VERSION에 대한 CHANGLOG.rst를 업데이트"
            git push origin ${{ github.head_ref }}

            # 버전 업데이트 사항을 Main branch에 변경사항을 병합합니다
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            git merge --allow-unrelated-histories ${{ github.head_ref }}
            git push origin ${{ github.base_ref }}

            # Main branch에 Tag를 생성합니다
            CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG.rst")
            gh release create $MAIN_VERSION -t $MAIN_VERSION -n "$CHANGELOG" --target ${{ github.base_ref }}

            # Release branch에 버전을 가져옵니다.
            git fetch origin release:release
            git checkout release
            RELEASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_PRE.rst")

            # hotfix branch의 버전을 release branch의 버전으로 변경 후 push을 병합합니다.
            git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

            # Hotfix 브랜치를 Release 브랜치로 PR 합니다.
            PR_TITLE=$(gh pr view ${{ github.event.pull_request.number }} --json title -q '.title')
            PR_TITLE=${PR_TITLE#*\]}
            PR_TITLE="--->[Hotfix $MAIN_VERSION to release] $PR_TITLE"
            PR_ASSIGNEE=$REPO_MANAGER
            
            # 새로운 PR을 생성하고 URL을 가져옵니다.
            PR_URL=$(gh pr create --base release --head ${{ github.event.pull_request.head.ref }} --title "$PR_TITLE" --body "$CHANGELOG$(cat ./.github/PULL_REQUEST_TEMPLATE/hotfix_to_release.md)" --assignee "$PR_ASSIGNEE")

            # URL에서 PR 번호 추출
            PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]\+$')
            
            # 매핑 파일을 읽고 매핑을 생성합니다
            declare -A mapping
            while IFS="=" read -r author github_username
            do
              mapping["$author"]="$github_username"
            done < .github/github_username.txt

            set +e
            # 커밋 작성자를 찾습니다
            RELEASE_SHA=$(git rev-parse release)
            authors=$(git log $RELEASE_SHA..${{ github.event.pull_request.head.sha }} --pretty="%b" | grep Signed-off-by: | cut -d '<' -f 2 | cut -d '>' -f 1 | sort | uniq)
            echo "$RELEASE_SHA ~ ${{ github.event.pull_request.head.sha }} : $authors"

            # 작성자를 배열로 변환합니다
            readarray -t authors_array <<<"$authors"
                      
            # 배열을 15명씩 그룹화하고 각 그룹에 대해 리뷰어를 추가합니다
            for ((i=0; i<${#authors_array[@]}; i+=15)); do
              reviewers=()
              for ((j=i; j<i+15 && j<${#authors_array[@]}; j++)); do
                author=${authors_array[j]}
                if [ -z "${mapping["$author"]}" ]; then
                  echo "No GitHub username found for author '$author'"
                  continue
                fi
                reviewers+=("${mapping["$author"]}")
              done
              IFS=',' reviewers_string="${reviewers[*]}"
              gh pr edit $PR_NUMBER --add-reviewer "$reviewers_string"
              if [ $? -ne 0 ]; then
                echo "Error occurred while adding reviewers"
              fi
            done
            set -e

          elif [[ "${{ github.base_ref }}" == "release" ]]; then
            echo "Hotfix to Release"

            # Hotfix Branch의 버전에 이전에 push 해둔 CHANGELOG.rst의 최신 버전을 받아옵니다.
            MAIN_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG.rst")

            # Develop branch의 버전을 가져옵니다.
            git fetch origin develop:develop
            git checkout develop
            DEVELOP_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_DEV.rst")

            # Hotfix 브랜치를 Develop 브랜치로 PR 합니다.
            PR_TITLE=$(gh pr view ${{ github.event.pull_request.number }} --json title -q '.title')
            # 대괄호([])로 둘러싸인 부분을 제거합니다
            PR_TITLE=${PR_TITLE#*\]}
            # PR 제목을 수정합니다
            PR_TITLE="--->[Hotfix $MAIN_VERSION to develop] $PR_TITLE"
            PR_ASSIGNEE=$REPO_MANAGER
            
            # 새로운 PR을 생성하고 URL을 가져옵니다.
            CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG.rst")
            PR_URL=$(gh pr create --base develop --head ${{ github.event.pull_request.head.ref }} --title "$PR_TITLE" --body "$CHANGELOG$(cat ./.github/PULL_REQUEST_TEMPLATE/hotfix_to_develop.md)" --assignee "$PR_ASSIGNEE")

            # URL에서 PR 번호 추출
            PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]\+$')

            # 매핑 파일을 읽고 매핑을 생성합니다
            declare -A mapping
            while IFS="=" read -r author github_username
            do
              mapping["$author"]="$github_username"
            done < .github/github_username.txt
            
            set +e
            # 커밋 작성자를 찾습니다
            DEVELOP_SHA=$(git rev-parse develop)
            authors=$(git log $DEVELOP_SHA..${{ github.event.pull_request.head.sha }} --pretty="%b" | grep Signed-off-by: | cut -d '<' -f 2 | cut -d '>' -f 1 | sort | uniq)
            echo "$DEVELOP_SHA ~ ${{ github.event.pull_request.head.sha }} : $authors"
            
            # 작성자를 배열로 변환합니다
            readarray -t authors_array <<<"$authors"
                      
            # 배열을 15명씩 그룹화하고 각 그룹에 대해 리뷰어를 추가합니다
            for ((i=0; i<${#authors_array[@]}; i+=15)); do
              reviewers=()
              for ((j=i; j<i+15 && j<${#authors_array[@]}; j++)); do
                author=${authors_array[j]}
                if [ -z "${mapping["$author"]}" ]; then
                  echo "No GitHub username found for author '$author'"
                  continue
                fi
                reviewers+=("${mapping["$author"]}")
              done
              IFS=',' reviewers_string="${reviewers[*]}"
              gh pr edit $PR_NUMBER --add-reviewer "$reviewers_string"
              if [ $? -ne 0 ]; then
                echo "Error occurred while adding reviewers"
              fi
            done
            set -e

          else
            echo "Hotfix to develop"
            # Delete the remote hotfix branch
            git push origin --delete ${{ github.head_ref }}
          fi
          
        elif [[ "${{ github.head_ref }}" == rcfix-* ]]; then
          if [[ "${{ github.base_ref }}" == release ]]; then
            echo "RCfix to release"

            # Release branch에서 CHANGELOG_PRE.rst의 마지막 버전을 가지고와 RCfic 버전을 계산합니다.
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            BASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_PRE.rst")
            RELEASE_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$BASE_VERSION" "rc")

            # RCfic Branch의 버전을 새로운 버전으로 변경합니다.
            git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
            git checkout ${{ github.head_ref }}
            
            python3 ./.github/changelogs/insert_changelog.py "$RELEASE_VERSION" "CHANGELOG_PRE.rst" "$PR_BODY" "$AUTHOR" "$PR_URL"
            git add .
            git commit -m "[AUTO] RCfix $RELEASE_VERSION에 대한 CHANGLOG_PRE.rst를 업데이트"
            git push origin ${{ github.head_ref }}

            # 버전 업데이트 사항을 Release branch에 변경사항을 병합합니다
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            git pull origin ${{ github.base_ref }}
            git merge --allow-unrelated-histories ${{ github.head_ref }}
            git push origin ${{ github.base_ref }}

            # Release branch에 Tag를 생성합니다
            CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG_PRE.rst")
            gh release create $RELEASE_VERSION -t $RELEASE_VERSION -n "$CHANGELOG" --prerelease --target ${{ github.base_ref }}

            # Develop branch에 버전을 가져옵니다.
            git fetch origin develop:develop
            git checkout develop
            DEVELOP_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_DEV.rst")

            # RCfix branch의 버전을 Develop branch의 버전으로 변경 후 push을 병합합니다.
            git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

            # RCfix 브랜치를 Develop 브랜치로 PR 합니다.
            PR_TITLE=$(gh pr view ${{ github.event.pull_request.number }} --json title -q '.title')
            PR_TITLE=${PR_TITLE#*\]}
            PR_TITLE="--->[RCfix $RELEASE_VERSION to develop] $PR_TITLE"
            PR_ASSIGNEE=$REPO_MANAGER
            
            # 새로운 PR을 생성하고 URL을 가져옵니다.
            PR_URL=$(gh pr create --base develop --head ${{ github.event.pull_request.head.ref }} --title "$PR_TITLE" --body "$CHANGELOG$(cat .github/PULL_REQUEST_TEMPLATE/rcfix_to_develop.md)" --assignee "$PR_ASSIGNEE")

            # URL에서 PR 번호 추출
            PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]\+$')

            # 매핑 파일을 읽고 매핑을 생성합니다
            declare -A mapping
            while IFS="=" read -r author github_username
            do
              mapping["$author"]="$github_username"
            done < .github/github_username.txt

            set +e
            # 커밋 작성자를 찾습니다
            DEVELOP_SHA=$(git rev-parse develop)
            authors=$(git log $DEVELOP_SHA..${{ github.event.pull_request.head.sha }} --pretty="%b" | grep Signed-off-by: | cut -d '<' -f 2 | cut -d '>' -f 1 | sort | uniq)
            echo "$DEVELOP_SHA ~ ${{ github.event.pull_request.head.sha }} : $authors"

            # 작성자를 배열로 변환합니다
            readarray -t authors_array <<<"$authors"
                      
            # 배열을 15명씩 그룹화하고 각 그룹에 대해 리뷰어를 추가합니다
            for ((i=0; i<${#authors_array[@]}; i+=15)); do
              reviewers=()
              for ((j=i; j<i+15 && j<${#authors_array[@]}; j++)); do
                author=${authors_array[j]}
                if [ -z "${mapping["$author"]}" ]; then
                  echo "No GitHub username found for author '$author'"
                  continue
                fi
                reviewers+=("${mapping["$author"]}")
              done
              IFS=',' reviewers_string="${reviewers[*]}"
              
              gh pr edit $PR_NUMBER --add-reviewer "$reviewers_string"
              if [ $? -ne 0 ]; then
                echo "Error occurred while adding reviewers"
              fi
            done
            set -e

          else
            echo "RCfix to develop"
            # Delete the remote RCfix branch
            git push origin --delete ${{ github.head_ref }}
          fi

        elif [[ "${{ github.base_ref }}" == "develop" && "${{ github.head_ref }}" == feature-* ]]; then
          echo "feature to develop"

          # Develop branch에서 CHANGELOG_DEV.rst의 마지막 버전을 가지고와 Feture 버전을 계산합니다.
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          BASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_DEV.rst")
          DEVELOP_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$BASE_VERSION" "rc1")
          
          # Feture Branch의 버전을 새로운 버전으로 변경합니다.
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          
          python3 ./.github/changelogs/insert_changelog.py "$DEVELOP_VERSION" "CHANGELOG_DEV.rst" "$PR_BODY" "$AUTHOR" "$PR_URL"
          git add .
          git commit -m "[AUTO] Feature의 변경사항을 $DEVELOP_VERSION CHANGELOG_DEV.rst에 업데이트"
          git push origin ${{ github.head_ref }}

          # 버전 업데이트 사항을 Develop branch에 변경사항을 병합합니다
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          git merge --allow-unrelated-histories ${{ github.head_ref }}
          git push origin ${{ github.base_ref }}

          # Delete the remote feature branch
          git push origin --delete ${{ github.head_ref }}
          
        elif [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == release ]]; then
          echo "Release (release to main)"

          # Release에서 CHANGELOG_PRE.rst의 마지막 버전을 가지고와 Release 버전을 계산합니다.
          BASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_PRE.rst")
          NEW_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$BASE_VERSION" "rc_remove")

          # Release Branch의 버전을 새로운 버전으로 변경하고, CHANGELOG_PRE.rst를 CHANGELOG.rst로 이동합니다.
          python3 ./.github/changelogs/move_changelog.py "$NEW_VERSION" "CHANGELOG_PRE.rst" "CHANGELOG.rst"
          NEW_RELEASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_DEV.rst")
          git add .
          git commit -m "[AUTO] Release $NEW_VERSION에 대한 CHANGELOG작성"
          git push origin ${{ github.head_ref }}

          # 버전 업데이트 사항을 main branch에 변경사항을 병합합니다
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          git merge --allow-unrelated-histories ${{ github.head_ref }}
          git push origin ${{ github.base_ref }}

          # Main branch에 Tag를 생성합니다
          CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG.rst")
          gh release create $NEW_VERSION -t $NEW_VERSION -n "$CHANGELOG" --target ${{ github.base_ref }}

          # Release 브랜치의 package.xml 버전을 다음 develop 브랜치에 맞춥니다.
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

        elif [[ "${{ github.base_ref }}" == release && "${{ github.head_ref }}" == "develop" ]]; then

          # Develop CHANGELOG_DEV.rst의 마지막 버전을 가지고와 Release 버전을 계산합니다.
          NEW_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG_DEV.rst")

          # Develop Branch의 버전을 새로운 버전으로 변경하고, CHANGELOG_PRE.rst를 CHANGELOG.rst로 이동합니다.
          python3 ./.github/changelogs/move_changelog.py "$NEW_VERSION" "CHANGELOG_DEV.rst" "CHANGELOG_PRE.rst"
          NEW_DEVELOP_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$NEW_VERSION" "minor")
          NEW_DEVELOP_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$NEW_DEVELOP_VERSION" "rc1")
          python3 ./.github/changelogs/insert_changelog.py "$NEW_DEVELOP_VERSION" "CHANGELOG_DEV.rst" "" "" ""
          git add .
          git commit -m "[AUTO] pre-Release $NEW_VERSION에 대한 CHANGELOG작성"
          git push origin ${{ github.head_ref }}

          # 버전 업데이트 사항을 main branch에 변경사항을 병합합니다
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          git merge --allow-unrelated-histories ${{ github.head_ref }}
          git push origin ${{ github.base_ref }}

          # release branch에 Tag를 생성합니다
          CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG.rst")
          gh release create $NEW_VERSION -t $NEW_VERSION -n "$CHANGELOG" --prerelease  --target ${{ github.base_ref }}

          # Develop 브랜치의 package.xml 버전을 다음 버전에 맞춥니다.
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

        else
          echo "No update package.xml and CHANGLOG.rst"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TOTAL_MANAGER: 'kaym9n' # 총담당자의 GitHub 사용자 이름
        REPO_MANAGER: 'pung87' # 리포지토리 담당자의 GitHub 사용자 이름
      shell: bash