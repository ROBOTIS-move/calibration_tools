name: PR Closed
on:
  pull_request:
    types:
      - closed
concurrency: 
  group: pr_auto
  cancel-in-progress: false
jobs:
  apply_pr:
    runs-on: ubuntu-latest
    container:
      image: hpaper/github-action
    if: github.event.pull_request.merged == true
    steps:
    - name: Set git user
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Checkout head branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Fix directory ownership and permissions
      run: |
        chown -R $(whoami) /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
        chmod -R u+rwX /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

    - name: Update version info in package.xml and CHANGLOG.rst and create release tag and PR
      run: |
        PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q '.body')
        PR_URL=${{ github.event.pull_request.html_url }}
        AUTHOR=${{ github.event.pull_request.user.login }}
    
        echo "Update version info in package.xml and CHANGLOG.rst"
    
        if [[ "${{ github.head_ref }}" == hotfix-* ]]; then
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "Hotfix to main"
          
            # Main branch에서 CHANGELOG.rst의 마지막 버전을 가지고와 hotfix 버전을 계산합니다.
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            BASE_VERSION=$(python3 ./.github/changelogs/get_last_version.py "CHANGELOG.rst")
            MAIN_VERSION=$(python3 ./.github/changelogs/get_new_version.py "$BASE_VERSION" "patch")

            # Hotfix Branch의 버전을 새로운 버전으로 변경합니다.
            git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
            git checkout ${{ github.head_ref }}

            python3 ./.github/changelogs/insert_changelog.py "$MAIN_VERSION" "CHANGELOG.rst" "$PR_BODY" "$AUTHOR" "$PR_URL"
            git add .
            git commit -m "[AUTO] Hotfix $MAIN_VERSION에 대한 CHANGLOG.rst를 업데이트"
            git push origin ${{ github.head_ref }}

            # 버전 업데이트 사항을 Main branch에 변경사항을 병합합니다
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            git checkout ${{ github.base_ref }}
            git merge --allow-unrelated-histories ${{ github.head_ref }}
            git push origin ${{ github.base_ref }}

            # Main branch에 Tag를 생성합니다
            CHANGELOG=$(python3 ./.github/changelogs/get_last_change.py "CHANGELOG.rst")
            gh release create $MAIN_VERSION -t $MAIN_VERSION -n "$CHANGELOG" --target ${{ github.base_ref }}
            
            git push origin --delete ${{ github.head_ref }}
          fi
        else
          echo "No update package.xml and CHANGLOG.rst"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash